AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Dashora Analytics Dashboard
  SAM Template for serverless backend deployment

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: python3.12
    Architectures:
      - x86_64
    Environment:
      Variables:
        METRICS_TABLE_NAME: !Ref DashoraMetricsTable
        DOMAINS_TABLE_NAME: !Ref DashoraDomainsTable
        USERS_TABLE_NAME: !Ref DashoraUsersTable
        JWT_SECRET: !Ref JwtSecret
        STAGE: dev

Parameters:
  JwtSecret:
    Type: String
    Description: Secret key for JWT token validation
    NoEcho: true

Resources:
  # DynamoDB Tables
  DashoraMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dashora-metrics-api
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: domain_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: domain_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  DashoraDomainsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dashora-domains-api
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: domain_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: domain_id
          KeyType: RANGE

  DashoraUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dashora-users-api
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  # Lambda Functions
  DashoraWooCommerceFetcher:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dashora-api-woocommerce-fetcher
      CodeUri: ./lambdas/woocommerce_fetcher/
      Handler: lambda_function.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraDomainsTable
      Events:
        ScheduledFetch:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)

  DashoraGoogleAnalyticsFetcher:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dashora-api-ga-fetcher
      CodeUri: ./lambdas/ga_fetcher/
      Handler: lambda_function.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraDomainsTable
      Events:
        ScheduledFetch:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)

  DashoraMetricsProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dashora-api-metrics-processor
      CodeUri: ./lambdas/metrics_processor/
      Handler: lambda_function.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraDomainsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraMetricsTable
      Events:
        ProcessWooCommerceData:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - lambda
              detail-type:
                - "Lambda Function Invocation Result - Success"
              detail:
                requestContext:
                  functionName:
                    - !Ref DashoraWooCommerceFetcher
        ProcessGAData:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - lambda
              detail-type:
                - "Lambda Function Invocation Result - Success"
              detail:
                requestContext:
                  functionName:
                    - !Ref DashoraGoogleAnalyticsFetcher

  DashoraApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dashora-api-handler
      CodeUri: ./lambdas/api_handler/
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref DashoraDependenciesLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraDomainsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraMetricsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DashoraUsersTable
      Events:
        # Login endpoint
        LoginEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /login
            Method: POST
        # Domains endpoint
        DomainsEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /domains
            Method: GET
        # Add domain endpoint
        AddDomainEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /domains
            Method: POST
        # Metrics endpoint
        MetricsEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /metrics/{domain}
            Method: GET
        # Integration endpoints
        IntegrationGetEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /domains/{domain}/integrations/{type}
            Method: GET
        IntegrationPostEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /domains/{domain}/integrations/{type}
            Method: POST
        IntegrationDeleteEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /domains/{domain}/integrations/{type}
            Method: DELETE
        # Debug and test endpoints
        TestEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /test
            Method: GET
        DebugEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DashoraApiGateway
            Path: /debug
            Method: GET

  # API Gateway
  DashoraApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: NONE
        AddDefaultAuthorizerToCorsPreflight: false

  # Lambda Layer for Dependencies
  DashoraDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dashora-dependencies
      Description: Dependencies for Dashora API Lambda functions
      ContentUri: ./lambdas/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${DashoraApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  WooCommerceFetcherArn:
    Description: "WooCommerce Fetcher Function ARN"
    Value: !GetAtt DashoraWooCommerceFetcher.Arn
  GoogleAnalyticsFetcherArn:
    Description: "Google Analytics Fetcher Function ARN"
    Value: !GetAtt DashoraGoogleAnalyticsFetcher.Arn
  MetricsProcessorArn:
    Description: "Metrics Processor Function ARN"
    Value: !GetAtt DashoraMetricsProcessor.Arn
  ApiFunctionArn:
    Description: "API Handler Function ARN"
    Value: !GetAtt DashoraApiFunction.Arn 